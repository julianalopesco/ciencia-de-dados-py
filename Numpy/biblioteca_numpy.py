# -*- coding: utf-8 -*-
"""Biblioteca_Numpy.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eiEt29NNBKClrFfC7rW_qD2bkMcyyptL
"""

import numpy as np

# Outra forma de carregar os dados:
#url = 'https://github.com/alura-cursos/numpy/blob/dados/apples_ts.csv'
#dado = np.loadtxt(url,delimiter=',',usecols=np.arange(1,88,1))

#função da numpy para abrir o arquivo
dado = np.loadtxt('apples_ts.csv',delimiter=',',usecols=np.arange(1,88,1)) #delimitando as colunas que serão usadas. col 1, col final, valor de incremento

print(dado)

#verificando a quantidade de dimensões do array
dado.ndim

#verificando a quantidade de dados

dado.size

#verificando o formato dos dados
dado.shape

#no print: (linhas, col)

#transformando as linhas em colunas e guardando a informação
dado_transposto = dado.T

print(dado_transposto)

#selecionando e separando as informações
datas = dado_transposto[:,0] #: =pega todas as linhas do dataset

precos = dado_transposto[:,1:6]

#transformando os meses do dataset

datas = np.arange(1,88,1)

#criando visuais para as informações

import matplotlib.pyplot as plt #biblioteca para visualizações

plt.plot(datas, precos[:,0])  #(eixo X, eixo Y)

#fazendo uma seleção de dados, criando uma variavel para cada coluna dos preços, ref a cidades

Moscow = precos[:,0]
Kaliningrad = precos[:,1]
Petesburg = precos[:,2]
Krasnodar = precos[:,3]
Ekaterinburf = precos[:,4]

#selecionando apenas uma cidade
print(Moscow)

#separando por anos
Moscow_ano1 = Moscow[0:12]
Moscow_ano2 = Moscow[12:24]
Moscow_ano3 = Moscow[24:36]
Moscow_ano4 = Moscow[36:48]

#montando um gráfico por ano
plt.plot(np.arange(1,13,1),Moscow_ano1) #usando o intervalo para o ano
plt.plot(np.arange(1,13,1),Moscow_ano2)
plt.plot(np.arange(1,13,1),Moscow_ano3)
plt.plot(np.arange(1,13,1),Moscow_ano4)

#identificando as informações
plt.legend(['ano1','ano2','ano3','ano4'])

#comparando arrays
np.array_equal(Moscow_ano3,Moscow_ano4)

#verificando diferença de valores
np.allclose(Moscow_ano3,Moscow_ano4,10) #0.01: parâmetro de diferença

#lidando com nulos

#visualizando o gráfico
plt.plot(datas,Kaliningrad)

#visualizando o dataframe
print(Kaliningrad)

#nan: nulo

#verificando a quantidade de nulos
sum(np.isnan(Kaliningrad))

#lidando com valores nulos

#fazendo a interpolação(calculando a média entre valor anterior e posterior)
(Kaliningrad[3]+Kaliningrad[5])/2

#outraforma
#np.mean([Kaliningrad[3], Kaliningrade[5]])

#susbstituindo o valor
Kaliningrad[4] = np.mean(Kaliningrad[3]+Kaliningrad[5])/2

#comparando médias

print(np.mean(Moscow))
print(np.mean(Kaliningrad))

#Fazendo uma projeção

#1-calculando o coeficiente angular

Y = Moscow
X = datas
n = np.size(Moscow)

#elevando o elemendo ao quadrado
(X**2).shape

#calculando o coeficiente angular com formula e atribuindo a a
a = (n*np.sum(X*Y) - np.sum(X)*np.sum(Y))/(n*np.sum(X**2)- np.sum(X)**2)

#calculando o coeficiente b
b = np.mean(Y) - a*np.mean(X)

y = a*X+b
x = datas

np.linalg.norm(Moscow-y)

#gerando o gráfico com o y
plt.plot(datas,Moscow)
plt.plot(x,y)

#calculando estimativa de valores intermediarios
plt.plot(datas,Moscow)
plt.plot(x,y)
plt.plot(41.5,41.5*a+b, '*r') #*r: plota um asterisco

#fazendo uma projeção, no mês 100
#a: traz a taxa de crescimento
plt.plot(100,100*a+b, '*r')