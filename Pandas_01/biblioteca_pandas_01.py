# -*- coding: utf-8 -*-
"""biblioteca_pandas_01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tLKjveXreR83XxBnrd6VBwnFo1NoerkS
"""

import pandas as pd

#IMPORTANDO  E SALVANDO OS DADOS

url = 'https://raw.githubusercontent.com/alura-cursos/pandas-conhecendo-a-biblioteca/main/base-de-dados/aluguel.csv'
dados = pd.read_csv(url, sep=';')
dados

dados.head(10)

dados.tail(10)

type(dados)

#EXPLORANDO OS DADOS

#verificando o tamanho do dataframe
dados.shape #(linhas, col)

#exibindo o nome das colunas
dados.columns

#exibindo os tipos de dados de cada coluna
dados.info()

#retornando uma series com os tipos de dados em objetos
dados['Tipo']

#visualizando outras colunas
dados[['Quartos','Valor']]

#ANALISANDO OS DADOS

#fazendo uma análise exploratória:
dados.describe()

#verificando o valor médio de aluguel por tipo de imóvel

#dados.groupby('Tipo').mean(numeric_only=True) #mean = método que calcula a média. numeric_only: unicamente em colunas numericas
dados.groupby('Tipo')['Valor'].mean()

#transformando os dados em um dataframe
dados.groupby('Tipo')[['Valor']].mean().sort_values('Valor')

#plotando um gráfico
df_preco_tipo = dados.groupby('Tipo')[['Valor']].mean().sort_values('Valor')

df_preco_tipo.plot(kind='barh', figsize=(14,10), color ='purple'); #barh = barras horizontais, figsize = tamanho

#removendo os imóveis comerciais

#visualizando os tipos
dados.Tipo.unique()

imoveis_comerciais = ['Conjunto Comercial/Sala',
                      'Prédio Inteiro', 'Loja/Salão',
                      'Galpão/Depósito/Armazém',
                      'Casa Comercial', 'Terreno Padrão',
                      'Loja Shopping/ Ct Comercial',
                      'Box/Garagem', 'Chácara',
                      'Loteamento/Condomínio', 'Sítio',
                      'Pousada/Chalé', 'Hotel', 'Indústria']

#removendo os registros e salvando numa variavel
df = dados.query('@imoveis_comerciais not in Tipo')
df.head()

#verificando a seleção novamente
df.Tipo.unique()

#plotando o gráfico com a seleção
df_preco_tipo = df.groupby('Tipo')[['Valor']].mean().sort_values('Valor')

df_preco_tipo.plot(kind='barh', figsize=(14,10), color ='purple');

#Verificando o percentual de cada tipo de imóvel

#verificando os tipos únicos
df.Tipo.unique()

#fazendo a contagem
df.Tipo.value_counts()

#visualizando em percentuais
df_percentual_tipo = df.Tipo.value_counts(normalize=True).to_frame().sort_values('Tipo') #toframe: converte uma series em um df
df_percentual_tipo

#transformando em gráfico

df_percentual_tipo = df['Tipo'].value_counts(normalize=True).to_frame().sort_values('Tipo')

df_percentual_tipo.plot(kind='bar', figsize=(14, 10), color ='green', edgecolor='black',
                        xlabel = 'Tipos', ylabel = 'Percentual');

#selecionando apenas um tipo de imóvel
df = df.query('Tipo == "Apartamento"')
df.head()

#verificando quais bairros possuem média de aluguel mais alto

df.groupby('Bairro')[['Valor']].mean().sort_values('Valor', ascending=False)

#fazendo gráfico para os alugueis mais caros
df_bairros = df.groupby('Bairro')[['Valor']].mean().sort_values('Valor', ascending=False).head()

df_bairros.plot(kind='barh', figsize=(14,10), color='blue');

#LIDANDO COM DADOS NULOS

#descobrindo quais colunas possuem dados nulos
df.isnull()

#melhorando a visualização
df.isnull().sum()

#tratando os dados nulos, preenchendo com 0
df = df.fillna(0)

#conferindo a exclusão
df.isnull().sum()

#excluindo alguns registros

#selecionando as linhas com 0 em determinadas colunas
df.query('Valor == 0 | Condominio == 0').index #index = captura o índice das linhas

#armazenando os index em uma variavel
registros_a_remover = df.query('Valor == 0 | Condominio == 0').index

#removendo as linhas

df.drop(registros_a_remover, axis=0, inplace=True) #axis: parâmetro, 0 para col e 1 para linha

#conferindo a exclusão
df.query('Valor == 0 | Condominio == 0')

#excluindo a coluna de tipo:
df.drop('Tipo', axis=1, inplace=True)

#conferindo o df
df.head()

#APLICANDO FILTROS

#selecionando aptos que possuem apenas um quarto
selecao1 = df['Quartos'] == 1
#exibindo somente as linhas de acordo com a seleção
df[selecao1]

#fazendo outra seleção, a partir do valor de aluguel
selecao2 = df['Valor']<1200
df[selecao2]

#unindo mais de um filtro
selecao_final = (selecao1) & (selecao2)
df[selecao_final]

#salvando a seleção em uma variável
df_1 = df[selecao_final]

#selecionando aptos com pelo menos 2 quartos, aluguel menor que 3000 e area maior que 70

selecao = (df['Quartos'] >=2) & (df['Valor'] < 3000) & (df['Area'] > 70)
df[selecao]

#salvando a seleção
df_2 = df[selecao]

#SALVANDO OS DADOS

df.to_csv('dados_apartamentos.csv', index =False) #(nome do arquivo, parâmetro que exclui o indice atual)

#lendo os dados
pd.read_csv('dados_apartamentos.csv')

#CRIANDO COLUNAS NUMÉRICAS

#importando os dados
url = 'https://raw.githubusercontent.com/alura-cursos/pandas-conhecendo-a-biblioteca/main/base-de-dados/aluguel.csv'
dados = pd.read_csv(url, sep=';')
dados.head()

#criando a coluna de valor por mês
dados['Valor_por_mes'] = dados['Valor'] + dados['Condominio']
dados.head()

#criando coluna de valor por ano
dados['Valor_por_ano'] = dados['Valor_por_mes'] * 12 + dados['IPTU']
dados.head()

#CRIANDO COLUNAS CATEGORICAS

#criando a coluna de descrição
dados['Descricao'] = dados['Tipo'] + ' em ' + dados['Bairro'] + ' com ' + \
                                        dados['Quartos'].astype(str) + ' quarto(s)' + \
                                       ' e ' + dados['Vagas'].astype(str) + ' vaga(s) de garagem.'

#astype: converte para str, para a concatenação funcionar
dados.head()

#criando a coluna binária
dados['Possui_suite'] = dados['Suites'].apply(lambda x: "Sim" if x > 0 else "Não") #lambda: função personalizada (lambda) para o método aplly
dados.head()

#salvando os dados
dados.to_csv('dados_completos_dev.csv', index=False,sep=';')